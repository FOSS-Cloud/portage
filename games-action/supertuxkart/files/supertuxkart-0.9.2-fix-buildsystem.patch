* Unbundle remaining libraries: GLEW, zlib, png, jpeg
* Add -DAS_DEPRECATED for Angelscript
* Remove definition of debug macros
* Build bundled Irrlicht with user flags

--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -68,37 +68,10 @@
 include_directories(${ENET_INCLUDE_DIR})
 
 # Build glew library
+find_package(GLEW REQUIRED)
+include_directories(${GLEW_INCLUDE_DIRS})
 add_definitions(-DGLEW_NO_GLU)
-add_subdirectory("${PROJECT_SOURCE_DIR}/lib/glew")
-include_directories("${PROJECT_SOURCE_DIR}/lib/glew/include")
 
-if((WIN32 AND NOT MINGW) OR APPLE)
-    if (NOT APPLE)
-    # Build zlib library
-    add_subdirectory("${PROJECT_SOURCE_DIR}/lib/zlib")
-    include_directories("${PROJECT_SOURCE_DIR}/lib/zlib")
-
-    set(ZLIB_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/lib/zlib" "${PROJECT_BINARY_DIR}/lib/zlib/")
-    set(ZLIB_LIBRARY zlibstatic)
-    endif()
-
-    # Build png library
-    set (SKIP_INSTALL_ALL TRUE)
-    set (PNG_STATIC TRUE)
-    set (PNG_TESTS FALSE)
-    set (PNG_SHARED FALSE)
-    add_subdirectory("${PROJECT_SOURCE_DIR}/lib/libpng")
-    include_directories("${PROJECT_SOURCE_DIR}/lib/libpng")
-
-    #build jpeg library
-    add_subdirectory("${PROJECT_SOURCE_DIR}/lib/jpeglib")
-    include_directories("${PROJECT_SOURCE_DIR}/lib/jpeglib")
-
-    set(PNG_PNG_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/lib/libpng/")
-    set(PNG_LIBRARY png15_static)
-    set(JPEG_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/lib/jpeglib/")
-    set(JPEG_LIBRARY jpeglib)
-endif()
 # Build the irrlicht library
 add_subdirectory("${PROJECT_SOURCE_DIR}/lib/irrlicht")
 include_directories("${PROJECT_SOURCE_DIR}/lib/irrlicht/include")
@@ -130,6 +103,7 @@
     find_package(Angelscript)
     if(ANGELSCRIPT_FOUND)
         include_directories(${Angelscript_INCLUDE_DIRS})
+        add_definitions(-DAS_DEPRECATED)
     else()
         message(FATAL_ERROR "Angelscript not found. "
             "Either install angelscript or use built-in version using "
@@ -245,14 +219,6 @@
     # VS will automatically add NDEBUG for release mode, but only _DEBUG in debug mode.
     # Since STK uses DEBUG, this is added for debug compilation only:
     set_property(DIRECTORY PROPERTY COMPILE_DEFINITIONS_DEBUG DEBUG)
-else()
-    # All non VS generators used create only a single compile mode, so
-    # compile flags can be simplye be added
-    if(CMAKE_BUILD_TYPE MATCHES Debug)
-        add_definitions(-DDEBUG)
-    else()
-        add_definitions(-DNDEBUG)
-    endif()
 endif()
 
 # TODO: remove this switch
@@ -342,7 +308,7 @@
     bulletdynamics
     bulletcollision
     bulletmath
-    glew
+    ${GLEW_LIBRARIES}
     stkirrlicht
     ${Angelscript_LIBRARIES}
     ${CURL_LIBRARIES}
--- a/lib/irrlicht/CMakeLists.txt
+++ b/lib/irrlicht/CMakeLists.txt
@@ -20,15 +20,6 @@
 elseif(MINGW)
   add_definitions(-D_IRR_STATIC_LIB_)
   add_definitions(-D_CRT_SECURE_NO_WARNINGS) # Shut up about unsafe stuff
-else()
-  set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -Wall -pipe -O3  -fno-exceptions  -fstrict-aliasing -I/usr/X11R6/include")
-  set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -Wall -pipe -O3  -fno-exceptions  -fstrict-aliasing -I/usr/X11R6/include")
-  if(CMAKE_COMPILER_IS_GNUCC)
-	  set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} -fexpensive-optimizations")
-  endif()
-  if(CMAKE_COMPILER_IS_GNUCXX)
-	  set(CMAKE_CXX_FLAGS   "${CMAKE_CXX_FLAGS} -fexpensive-optimizations")
-  endif()
 endif()
 
 # Xrandr
